import json
import os
import boto3
from botocore.exceptions import ClientError

LOCAL_FALLBACK = os.path.join(os.path.dirname(__file__), '..', 'config', 'feature_flags.json')
S3_BUCKET = os.getenv("CONFIG_S3_BUCKET", "fm-cafe-config-bucket")
S3_KEY = os.getenv("CONFIG_S3_KEY", "feature_flags.json")
LOCALSTACK_URL = os.getenv("LOCALSTACK_URL", "http://localhost:4566")

def load_flags_from_s3():
    try:
        s3 = boto3.client(
            "s3",
            endpoint_url=LOCALSTACK_URL,
            aws_access_key_id="test",
            aws_secret_access_key="test",
            region_name="us-east-1"
        )
        obj = s3.get_object(Bucket=S3_BUCKET, Key=S3_KEY)
        text = obj['Body'].read().decode('utf-8')
        return json.loads(text)
    except ClientError as e:
        # Could be NoSuchBucket/NoSuchKey or connection error
        print(f"[WARN] Could not load config from S3: {e}")
        return None
    except Exception as e:
        print(f"[ERROR] Unexpected error reading S3 config: {e}")
        return None

def load_flags_local():
    try:
        with open(LOCAL_FALLBACK, 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        print(f"[ERROR] Cannot load local fallback config: {e}")
        return {}

def get_feature_flags():
    # Try S3 first
    flags = load_flags_from_s3()
    if flags:
        print("[INFO] Loaded feature flags from S3")
        return flags
    print("[INFO] Falling back to local config")
    return load_flags_local()

if __name__ == "__main__":
    flags = get_feature_flags()
    print("Feature flags:", json.dumps(flags, indent=2))
